2
3
0.0000000000  611.6157225201  648.7500617289
611.6157225201  0.0000000000  743.8557967501
648.7500617289  743.8557967501  0.0000000000
4
0.0000000000  326.0008994586  503.1066076077  290.0250922998
326.0008994586  0.0000000000  225.1785728436  395.4019367384
503.1066076077  225.1785728436  0.0000000000  620.3945520632
290.0250922998  395.4019367384  620.3945520632  0.0000000000

////////
문제

NP-Complete 문제의 가장 유명한 예 중 하나인 여행하는 외판원 문제 (Traveling Salesman Problem) 은, 여러 개의 도시와 그 도시 간의 거리가 주어졌을 때, 각 도시를 정확히 한 번씩 방문하는 가장 짧은 경로를 찾는 문제이다. 이 문제를 다항 시간에 해결할 수 있는 방법은 현재까지는 존재하지 않지만, 도시의 숫자가 작은 경우에는 비교적 사용 가능한 시간 안에 문제를 해결할 수 있다.

AOJ 에서 이 문제는 같은 내용을 가진 문제 여러 개로 구성된다. 문제 번호에 비례해 도시의 개수가 올라가므로, 뒤로 갈수록 더욱 효율적인 방법을 써야 해결할 수 있다.

도시의 수 N <= 8 이라고 할 때, 여행하는 외판원 문제를 해결하는 프로그램을 작성하라.

입력

입력의 첫 줄에는 테스트 케이스의 수 C (<= 50) 이 주어진다. 각 테스트 케이스의 첫 줄에는 도시의 수 N (3 <= N <= 8) 이 주어진다. 그 후 N 줄에, 각 N 개씩의 실수로 도시간의 거리가 주어진다. 도시들은 1 부터 N 까지의 숫자로 표현되며, i 번째 줄의 j 번째 실수는 i번째 도시와 j번째 도시 사이의 거리이다. 각 거리는 0 이상 1415 이하이고, 소수점 밑 열 자리까지 주어진다.

주어진 행렬은 대칭이며, 입력되는 거리들은 삼각 부등식 (triangle inequality) 을 만족한다고 가정해도 좋다.

출력

테스트 케이스마다 한 줄에 최소 경로의 길이를 소수점 밑 열 자리까지 출력한다. 1e-7 이하의 절대/상대 오차가 있어도 맞는 답으로 인정한다.

예제 입력
2
3
0.0000000000  611.6157225201  648.7500617289
611.6157225201  0.0000000000  743.8557967501
648.7500617289  743.8557967501  0.0000000000
4
0.0000000000  326.0008994586  503.1066076077  290.0250922998
326.0008994586  0.0000000000  225.1785728436  395.4019367384
503.1066076077  225.1785728436  0.0000000000  620.3945520632
290.0250922998  395.4019367384  620.3945520632  0.0000000000


예제 출력

1260.3657842490
841.2045646020
////////////////////// 풀이
1. bfs. 어차피 모두 탐색해야하니... 가지치기라기보다는 메모이제이션을 이용해야지. dfs는 흔하니.. bfs를 해보려고. 근데 재귀방식이 아닌데 가능함?
   // abcd일경우, 내 생각에는. dp[a][b]...dp[d][c] , dp[a][cd]  .... dp[d][bc] . //해쉬맵사용해야겠다.
   // tsp(root, {a~d}) = min(dp[a][bcd]...dp[d][abc])
   // dp[a][bcd] = min( w[a][b] + tsp({bcd}), w[a][c] + tsp({cdb}) ... ) // 이런형태?
   
2. 둘다해볼까? 일단 쉬워보이는 dfs 슈도..코드를. 
3. 만들고 비교해봐야지

<html>
  <head>
  <script type="text/javascript">
    main();
function main() {
  var wp    = [
               [0.0000000000,326.0008994586,503.1066076077,290.0250922998]
              ,[326.0008994586,0.0000000000,225.1785728436,395.4019367384]
              ,[503.1066076077,225.1785728436,0.0000000000,620.3945520632]
              ,[290.0250922998,395.4019367384,620.3945520632,0.0000000000]
              ];
  var nodes  = Object.keys(wp);
  var ROOT   = 'root'
  
  var dp = {}; // 일단 쉽게 이걸로.. 
  var count = 0;
  
  console.log(tsp(ROOT, nodes));
  console.log(count);
  
  console.log()

  function tsp(curNode, restNodes) {
    // 하나.. 일 경우  tsp(a ,{c})
    if(dp[curNode+restNodes]) return dp[curNode+restNodes];
    ++count;
    // console.log(curNode)
    if(restNodes.length == 1) return _getWp(curNode, restNodes.pop());
    
    
    var minTsp = Number.POSITIVE_INFINITY;
    for(var i in restNodes) {
      var childNode    = restNodes[i]
        , newRestNodes = _getRestNodes(restNodes, childNode)
        ,aTspValue     = _getWp(curNode, childNode) + tsp(childNode, newRestNodes);

      if(minTsp > aTspValue) minTsp = aTspValue;
    }

    return dp[curNode+restNodes] = minTsp;
  }
  function _getRestNodes(nodes, excludeNode) {
      return nodes.filter(function (v,i) {
             return v != excludeNode;
      })
  }
  function _getWp(fromIdx, toIdx) {
      if(fromIdx==ROOT) return 0;
      else return wp[fromIdx][toIdx];
  }
};
  </script>

  </head>
  
  <body>
  he
  </body>
</html>