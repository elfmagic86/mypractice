# 분할 목표(평가)

 - 출력의 i와 o의 의미는?
  ; 여러문자가 섞여있으므로 두가지를 의미한다.
   > 참/거짓  or  입력/출력  or  이동/고정?
   > 하필이면 10, TF도 아닌 io이므로 입력출력으로 생각해봄.
   > 힌트가 스택이용이다.  순서대로 입력하고 출력하는 것이라고 생각해보자.
    ; i와 o의 갯수가 글자수의 2배이다. 즉 입/출력일 가능성이 높음.

 - 출력의 갯수는 문자열의 2배길이다. 무슨 의미일까? 
  > 하나의 문자에 대해 한번만 넣고, 한번만 뺀다.
    즉, 나온 문자가 일치하는 문자이다.
 
 - 입출은 맞고. push와 pop에 어떤 규칙이 있을까?
  ;스택. 거꾸로. 의미상 선순, 역순의 위치를 비교해서 같으면 그 순서이므로 넣고. 다르면 빼고. 하지않을까.
  > 이렇게 할경우. 될때까지 계속하므로 '문자열의 2배' 반복의 규칙이 지켜지지않아.
  ; 한번에 빼는것이 아니라. '하나씩 일치'시키면서 빼보는거야. 모두 일치할때까지 반복하는거고. 
  > 자리위치를 확인하여 같으면 빼고. 다르면 가만히.
   - 그럼 다음차례에서는?
    // 같으면 입력하고 안뺌.

  - 무엇을 놓친거지? 조건이 안맞는다.
   ; 일치하지 않을시 뺀다. 일치할시 넣고 '다음위치의 것을 비교한다.'
   > 즉, result의 처음 문자부터 비교하되 일치해야 다음것을 비교함. 일치하지않으면 계속그것만 비교함.
    ; 자리수를 비교하는것이 아니었어.
   = 다른것을 빼는것은 맞아. 그런데 빼지 않는 조건이 있어. 그것이 무엇이지?
   - 어떨때 연속으로 넣고, 어떨때 연속으로 뺀다?
   =>  push 후 결과 문자를 뒤에서 비교해서 같으면 다음 push
   =>    뒤비교  다를경우. 결과문자를 앞에서 비교해서 같으면 다음 push
   =  그 둘이 모두 다를경우 pop하는데. 
   => pop후 스택에서 비교해서 더 pop할지 선택한다. 
  => 이거 해봐야겠다. 부분문자열도 비교하는듯하다 ㅡㅡㅡㅡㅡ
 => 푸쉬한 '문자'가 자신의 result의 "현재위치"를 기억하고있어.
     만약. result의 제일왼쪽이라면 pop을하는데.. 그 "현재위치"까지 pop하는거야.
    그리고 아니라면 ..왼쪽에 비교할것이 더 있다면.
    계속. 왼쪽에 비교할 것이 없을때까지 push
   그리고 result는 pop된 비교 문자는 "완료됨"으로 체크해야해 

  -> 삽입시 노드에 대해. 왼쪽것이 체크되어있지만. 아직 팝되지 않은 것이라면
     체크를...병합시켜야해...

# 힌트로 추론.

  - 입력 '문자열' -> 원하는 '문자열'로 연산의 '과정'
   ; 
  - 두번째 입력은 스택에서 나온문자로 구성하고자 하는 문자열.
   ; 스택에서 나올때는 연산이 없다.
   > 입력전 '어떤 연산 후 입력.
     그리고 역순으로 나온 문자. // 이걸 고대로 비교.

   > 123으로 삽입시  321이 됨. 즉 원하는 문자열이 321일때 참이됨. 
   >  321 = 어떤연산(문자열)  
      스택 push... pop...          123  === 원하는문자열  같으면 리턴.

  - 어떤연산(문자열) 
   ; 


  - 입력과 결과 문자열을 비교해보면 왼쪽쉬프트일 가능성이 큼.
   ; 횟수를 따져보자.
   > 아님. 위의 목표를 생각해보니.


# 제한사항(확실한것)
  - 처음 '연산전' 길이 비교함 그래서 다르면. 암것도안함.
