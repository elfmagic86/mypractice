function
===


basic
---

# 이름규칙
  - Vimscript functions must start with a capital letter(첫문자 대문자로) if they are unscoped!
  : builtin function과 구분하기 위함으로 판단됨
  : function s:mine() 같이 namespcae를 사용하면 상관없음

# 정의 및 호출
  - 정의 구조
    ```
    fu[nction][!] {name}([arguments]) [range] [abort] [dict] [closure]
    endfunction
    ```

  - 호출
    ```
    " side effect가 있는경우를, 암시하는 호출방법?
    call Meow()

    " 일반적인 호출.(반환값 사용하는것같은)
    echom GetMeow()
    ```
# 함수정의시 !
: ... function! ...
: 존재하는것 있으면 에러없이 overriding

# 반환값, 명시적으로 return 값이 없을경우?
: 0(false 역할)을 반환함

# 특정한 argumetns 전달받기(js decorator비슷)
: :h function-argument 참고
  예로, range를 추가하면 a:firstline, a:lastline 사용가능
  

# function variable scope
  - arguments scope
    ```
    " 만약, a:의 scope를 제외한다면 name을 찾지못했다는 에러가남
    :function DisplayName(name)
    :  echom "Hello!  My name is:"
    :  echom a:name
    :endfunction
    ```

  - arguments 동적크기
    ```
    :function Varg(...)
    :  echom a:0 " arg의 length가 반환됨
    :  echom a:1 " 첫번째 arg의 값
    :  echo a:000 " arg의 리스트
    :endfunction
    ```

  - local variable: 아래와 같이 let으로 사용하는경우 
  - NOTE: you can't reassign argument variables. Now run these commands:
    ```
    :function AssignGood(foo)
    :  let foo_tmp = a:foo
    :  let foo_tmp = "Yep"
    :  echom foo_tmp
    :endfunction

    :call AssignGood("test")
    ```


기타 유용한것
---

# 정의된 모든 function 확인
: :function

# 이름으로 fuction참조 가져오고, 사용하기
  ```
  let Myfunc = function("MyFunction")
  echo Myfunc([1, 2], 3)
  ```


# 함수형 스타일의 map(), filter()등 사용방법
  - 사용예
  : h filter(
   
    ```
    " global function을 이용하는방법
    function! Filtered(fn, l)
        let new_list = deepcopy(a:l)
        call filter(new_list, string(a:fn) . '(v:val)')
        return new_list
    endfunction
    ```

  - TODO: lambda도 사용가능
  : :h lambda
