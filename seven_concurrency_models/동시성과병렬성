

# 동시성? 병렬성?
# ---

동시적인 프로그램은 기본적으로 비결정적이다. 타이밍에 따라 결과가 달라짐.
반면 병렬성은 비결정성을 내포하지 않는다.

	- 동시성
	ex) 한 학생이 책을 읽는 것을 듣는것과 동시에, 떠들썩한 교실을 진정시키거나 한삭생의 질문에 답을한다
		이 것은 동시성이지 병렬성은 아니다. 교사는 한명뿐

	- 병렬성
	ex) 위의 예에서 교사와 조교가 함께있다면 동시성과 병렬성이 가능
	ex) 학급 연하장 카드 생산, 학생 한명당 다섯개씩 할당
		카드를 만드는 한가지 일만 일어나므로 병렬적이지만 동시적인 것은 아니다.



# 병렬성
# ---
아키텍처

	- 비트 수준 병렬성
	ex) 32비트 수를 더하기위해,
		- 8비트컴퓨터는 8비트 명령들의 수열을 생성해야함
		- 32비트 컴퓨터는 각각 32비트 수를 병렬로(한번의 단계로)처리 할 수 있다.


	- 명령어 수준 병렬성
	현재 CPU는 파이프라이닝, 비순차 실행, 추측 실행등의 기법을 이용하며 매우 병렬적이다.

		(그러나)하나의 코어는 겉으로는 모든것이 정해진 순서대로 동작하는것처럼 보인다
		하지만 현재는 여러개의 코어가 협업하는 시대이기에 명령어들의 순서에 대해 고민할수밖에없음


	- 데이터 병렬성(SIMD: single instruction multiple data)
	대량의 데이터에 대해 똑같은 작업을 병렬적인 방식으로 수행하는 것이 가능
	ex) 이미지의 밝기를 환하게 조절한다. GPU가 강력한 데이터 병렬 처리기 역할

	- 태스크 수준 병렬성
	멀티프로세서, (프로그래머관점에서)메모리가 공유되는지 분산되는지가 관심사
		- 공유메모리
		: 각 프로세서가 메모리의 모든 부분에 자유롭게 접근할 수 있음.
		  프로세서간의 통신은 주로 메모리 자체를 통해 이루어짐

		- 분산메모리
		: 프로세서가 각자의 메모리를 소유
		  프로세서간의 통신은 주로 네트워크를 통해 이루어짐

# 동시성
# ---

동시성은 단순히 병렬성을 활용하는 것 이상을 의미함,
정확하게 구현된 동시성은 소프트웨어에 대해 반응성이 높고, 장애를 허용하며 효율적이고 간단하게 만들어준다.

	- 동시성 예시
	ex1) 스마트폰이, 음악, 네트워크통신, 화면터치 를 동시에
	ex2) IDE가 키보드 입력, 백그라운드에서 코드문법검사 동시에
	ex3) 웹서버는 여러개의 네트워크 연결을 동시에 다룸으로 하나의 느린요청이 다른 요청들에 영향주지않게함


	- 분산 소프트웨어
	분산 소프트웨어는 장애에 강하다는 장점(탄력성과 연결)

	- (예측불가능한 세계에맞는)탄력적 소프트웨어
	동시성은 독립성, 장애 감지를 통해 탄력성, 혹은 장애 허용을 가능하게 만듬
		독립성은 어느 한작업의 장애가 다른 작업에 영향을 주지 않게 함
		장애감지는 한동작이 장애가 생겼을때 다른 작업에 통지되어 그에대한 복구작업을 실행할수있게함
