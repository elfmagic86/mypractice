# 기본
  - pom.xml을 설정으로 사용함.
  - ~/.m2 에 의존성 설치됨,
    해당 유저에 대한 위치(~/)를 사용해서 이 위치를 local repository라고 하는것같음

# 빌드
: 어떤 goal을 실행하며 goal은 라이프사이클, phase, plugin이 될수있음

  - 라이프사이클
    - built-in으로 사용할수있는 default, clean, site가 있음
    : 각 명령은 phase들의 묶음(phases)이고, 순차적으로 실행됨.

    - 설명참고
    https://maven.apache.org/guides/introduction/introduction-to-the-lifecycle.html
  
  - phase or plugin
  : 실 동작하는 task 

  - <build> 태그
  : 빌드환경에 대한 온갖 설정이므로 주의.
  https://maven.apache.org/pom.html#Build

  - 현재 pom에 대해 어떤 goal을 사용할수있는지?
  ```
  mvn help:describe -Dcmd=compile
  mvn fr.jcgay.maven.plugins:buildplan-maven-plugin:list-plugin
  ```

# 메이븐과 플러그인 관계?
Maven is - at its heart - a plugin execution framework; all work is done by plugins. Looking for a specific goal to execute? This page lists the core plugins and others. There are the build and the reporting plugins:

  - Build plugins
  will be executed during the build and they should be configured in the <build/> element from the POM.

  - Reporting plugins
  will be executed during the site generation and they should be configured in the <reporting/> element from the POM. Because the result of a Reporting plugin is part of the generated site, Reporting plugins should be both internationalized and localized. You can read more about the localization of our plugins and how you can help.

  - 어떤 goal이 있는지?
  : 일단, mvn <tab> 으로 목록확인....

  - 각 goal이 어떤 일이 할까?
  : mvn -X goal 로 디버그 로그에서 goal을 확인할수있음, 아래의 링크에서 자세한 정보확인할수있음

    - 빌트인goal에 대한 플러그인 목록
    http://maven.apache.org/plugins/
      
    - install plugin
    http://maven.apache.org/plugins/maven-install-plugin/plugin-info.html

    - dependancies plugin
    https://maven.apache.org/plugins/maven-dependency-plugin/plugin-info.html

    - help plugin
    http://maven.apache.org/plugins/maven-help-plugin/plugin-info.html

  - plugin-goal의 help보기
  ```
  # 대부분 플러그인에 :help goal이있어서 아래처럼확인가능
  #   라이프사이클은 링크에서 어떤 플러그인 task?가 바인딩되었는지 확인해야함
  mvn <plugin-goal>:help [-Ddetail=true]
  mvn install:help
  ```

# usage

## help
  ```
  mvn help:describe -Dcmd=compile
  ```
## tomcat
TODO
http://tomcat.apache.org/maven-plugin-2.1/tomcat7-maven-plugin/run-mojo.html
https://www.lesstif.com/pages/viewpage.action?pageId=14090451

## 디버그
  - option
  : -X 옵션은 디버그정보 출력함

## download dependency
  ```
  #1. pom.xml에 명시된 플러그인 download
  mvn install

  #2. download sources, javadoc
  mvn dependency:sources
  mvn dependency:resolve -Dclassifier=javadoc

    # 아래명령은 deploy시 jar에? 내 소스와 자바독을 포함시키는명령임
    mvn source:jar
    mvn javadoc:jar
  ```

## eclipse
```
  # .classpath, .project, .settings? 생성
  # 이미생성되었을때는 pom보고 클래스패스 업데이트 해주는듯
  mvn eclipse:clean eclipse:eclipse
```

## 플러그인 버전관리

  - 에러로그 :'build.plugins.plugin.version' for org.apache.maven.plugins:maven-compiler-plugin is missing
  : 아래 방법으로 설치된?? 버전 확인해서 pom에 기입해준다.

  - 방법들
  https://stackoverflow.com/questions/4123044/maven-3-warnings-about-build-plugins-plugin-version
    ```
    # 현재설치된것 확인?
    $ mvn help:describe -DartifactId=maven-war-plugin -DgroupId=org.apache.maven.plugins

    # 의존성관련 정보?
    $ mvn dependency:tree
    $ mvn dependency:list
    $ mvn dependency:resolve
    $ mvn dependency:resolve-plugins  # <-- THIS
    Recently I discover how to get latest version for plug-in (or library) so no longer needs for googling or visiting Maven Central:

    $ mvn versions:display-dependency-updates
    $ mvn versions:display-plugin-updates     # <-- THI
    ```


## usages
  - mvn package
https://maven.apache.org/plugins/maven-war-plugin/usage.html
Invoking
mvn package
or
mvn clean compile war:war

