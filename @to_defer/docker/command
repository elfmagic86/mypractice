
# ==============================================================================
#
# ==============================================================================

# docker 서비스 실행/종료
	```
	sudo service docker start
	sudo service docker stop
	```

# ==============================================================================
# 정보
# ==============================================================================

# 컨테이너 상태확인
	```
	# 현재 실행중인 컨테이너
	docker ps
	docker ps -a # 모든 컨테이너
	```

# 로그
	```
	docker logs {CONTAINER_ID}
	```

# 차이확인
	```
	docker diff {CONTAINER_ID}
	```

# ==============================================================================
# 컨테이너
# ==============================================================================

# TODO
	- 컨테이너 이름 사용?

# 컨테이너 생성 및 실행(이미지 기준)
	주의: 아래명령은 항상 해당 이미지에대한 새 컨테이너가 생성된다.

	- 명령

		```
		# 컨테이너는 실행 후 종료됨
		docker run centos

		# 실행 후 터미널접속(root), 터미널종료하면 컨테이너 종료됨
		docker run -it centos

		# 컨테이너는 실행상태, attach로 접근가능, -it가 있어야함
		docker run -it -d centos
		```

	- 옵션(자주사용되는것만
		```
		-i, --interactive                    Keep STDIN open even if not attached
		-t, --tty                            Allocate a pseudo-TTY
		-p, --publish list                   Publish a container's port(s) to the host
		--rm                             Automatically remove the container when it exits
		```
# 컨테이너 접속
	```
	# 1. 접속 후 exit시 컨테이너 종료됨
	docker attach CONTAINER_ID

	# 2. 컨테이너 실행 후 접속(컨테이너 종료하지않음)
	docker start {CONTAINER_ID}
	docker exec -it [--user kang] {CONTAINER_ID} bash
	```

# 컨테이너 종료 및 제거
	```
	# 종료
	# kill과의 차이는?
	docker stop CONTAINER_ID

	# 제거
	docker rm CONTAINER_ID
	```

	- 추가(전체 종료/제거)
	```
	docker stop $(docker ps -a -q)
	docker rm $(docker ps -a -q)
	```

# ==============================================================================
# 이미지
# ==============================================================================

# 이미지 찾고 받기
	```
	docker search centos
	docker pull centos
	```

# 이미지 제거
	```
	docker rmi {IMAGE_ID}
	```

# ==============================================================================
# old
# ==============================================================================


# 자주 사용한느것
docker images
docker ps  // 현재실행중인것만.
docker ps -a
docker run {imagename|dockerhubrepository} [args]

- imageId구해서 지우기.
docker image rm `docker images | grep none | awk '{print $3}'`

## image생성
### 다운
  docker image pull mongo
  : mongo:latest로 다운이되겠지.

### 빌드  TODO 모호하다...?
: 빌드의 step이 중간에 실패하면 <none>이름이됨.

- docker build -t friendlyhello .
:(app.py변해서)빌드시 변경점이 생기는경우 새롭게 이미지가생성된다. 이전이미지는 <none>가됨.


## run
: docker run -p 80:80 username/repo:tag
```
docker run -p 27017:27017 mongo
```

### compose
docker swarm init
: init이나 join으로 swam에 노드가 포함되지않으면 배포등이안됨.
docker stack deploy -c docker-compose.yml getstartedlab

docker stack ps getstartedlab
docker stack rm getstartedlab



### 모음
docker build -t friendlyname .
- Create image using this directory's Dockerfile
docker run -p 4000:80 friendlyname
- Run "friendlyname" mapping port 4000 to 80
docker run -d -p 4000:80 friendlyname
- Same thing, but in detached mode
docker ps
- See a list of all running containers

docker stop `docker ps | awk '{print $1}'`
- 다 stop


docker stop <hash>
- Gracefully stop the specified container
docker ps -a
- See a list of all containers, even the ones not running
docker kill <hash>
- Force shutdown of the specified container
docker rm <hash>
- Remove the specified container from this machine
docker rm $(docker ps -a -q)
- Remove all containers from this machine
docker images -a
- Show all images on this machine
docker rmi <imagename>
- Remove all images from this machine
docker rmi $(docker images -q)

## 배포
docker login
- Log in this CLI session using your Docker credentials
docker tag <image> username/repository:tag
- Tag <image> for upload to registry
docker push username/repository:tag
- Upload tagged image to registry
docker run username/repository:tag
- Run image from a registry

## compose모음
docker stack ls
- List all running applications on this Docker host
docker stack deploy -c <composefile> <appname>
- Run the specified Compose file
docker stack services <appname>
- List the services associated with an app
docker stack ps <appname>
- List the running containers associated with an app
docker stack rm <appname>
- Tear down an application



## swarm
docker-machine create --driver virtualbox myvm1
- Create a VM (Mac, Win7, Linux)
docker-machine create -d hyperv --hyperv-virtual-switch "myswitch" myvm1
- Win10
docker-machine env myvm1
- View basic information about your node
docker-machine ssh myvm1 "docker node ls"
- List the nodes in your swarm
docker-machine ssh myvm1 "docker node inspect <node ID>"
- Inspect a node
docker-machine ssh myvm1 "docker swarm join-token -q worker"
- View join token
docker-machine ssh myvm1
- Open an SSH session with the VM; type "exit" to end
docker-machine ssh myvm2 "docker swarm leave"
- Make the worker leave the swarm
docker-machine ssh myvm1 "docker swarm leave -f"
- Make master leave, kill swarm
docker-machine start myvm1
- Start a VM that is currently not running
docker-machine stop $(docker-machine ls -q)
- Stop all running VMs
docker-machine rm $(docker-machine ls -q)
- Delete all VMs and their disk images
docker-machine scp docker-compose.yml myvm1:~
- Copy file to node's home dir
docker-machine ssh myvm1 "docker stack deploy -c <file> <app>"
- Deploy an app

