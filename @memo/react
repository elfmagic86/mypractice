


# https://midojeong.github.io/2018/04/19/mocking-is-a-code-smell/

	- 순수함수 성능관련
		기존 객체를 재사용하는 대신 새 객체를 생성하기 때문에 성능이 저하될 수
		있다고 생각할 수도 있지만, 여기엔 사실 좋은 부수효과 있습니다. 객체의
		변경여부를 항등연산자로 ( === ) 확인할 수 있습니다. 즉, 우리는 하나라도
		변경된 것을 발견하기 위해 객체 내부를 구석구석 확인하지 않아도 됩니다.

		이 방법을 사용하면 복잡한 상태 트리가 있는 React 구성 요소를 더 빨리
		렌더링할 수 있습니다. 각 렌더 패스 별로 심도있게 순회할 필요가 없어지기
		때문입니다. PureComponent를 상속하여 얕은 prop 및 state 비교로
		shouldComponentUpdate()를 구현할 수 있게됩니다. 객체의 주소가 변경되지
		않았음을 탐지하면 상태 트리의 해당 부분에서 아무 것도 변하지 않았으며
		트리를 모두 순회하지 않고도 계속 진행하면 된다는 것을 알 수 있습니다.

		순수 함수는 메모이제이션 할 수 있습니다. 이전에 동일한 입력을 처리한적이 있다면
		전체 객체를 다시 만들 필요가 없습니다. 미리 계산 된 값을 테이블에 저장하는
		방식으로 계산 복잡도를 메모리와 교환할 수 있습니다. 많은 메모리가 필요하지 않고
		계산적으로 비싼 프로세스의 경우, 이는 훌륭한 최적화 전략이 될 수 있습니다.

		순수 함수는 또한 부수효과가 없기 때문에 분할-정복 전략을 사용하여
		분산처리시스템에게 계산을 맡기는 것이 안전합니다. 이 전략은 원래 그래픽 용으로
		설계된 GPU를 사용하여 이미지, 비디오 또는 오디오 프레임을 처리하는 데 주로
		사용되지만 시뮬레이션, 과학실험 컴퓨팅과 같은 다른 용도로 많이 사용됩니다.

		다시 말해, 값을 변경하는 방식이 항상 빠르지는 않으며 매크로 최적화를 희생하여
		마이크로 최적화를 수행하기 때문에 더 느린 경우가 많습니다.
