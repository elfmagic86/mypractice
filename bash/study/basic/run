
실행관련
===

# 실행환경 주의
  - bash, sh의 차이주의
  : bash, sh인지 명확히 구분하지않으면 미묘하게 차이있는부분들이있음.
    - echo가 다름
    : bash의 echo -e 와 sh의 echo는 같다

  - 설정된 쉘환경 옵션주의
  : shopt로 현재 쉘환경의 옵션



실행환경
---
# 참고
: http://www.potatogim.net/wiki/파일:셸의_흐름.jpg

# Interactive/Non-Interactive Shell

  - 구분방법
  : echo $- # i포함여부

  - source명령어는 실행된 환경에 의존함.
  만약, prompt에서 source명령어를 사용하면 interactive임

## Interactive shell
: prompt로 직접 명령을 입력받아서 실행시키는 환경
  - 시작시, ~/.bashrc 실행함

## None-Interactive shell
: prompt를 거치지않은 실행(bash script, bash -c '명령' 등)
  - **alias**, history, job control과 같은 Interactive를 위한 기능이 disable된다.
  - ~/.bashrc 실행하지않음


# Login/Non-Login Shell
  - 구분방법
  : shopt | grep login

  - TODO 어떤것이?Login?Non-Login?
    - Non-Login
    : gnome-terminal

    - Login
    : 첫부팅 gui를 실행하는쉘?, ssh, tmux  

    - 디스플레이가 묻어있다?
    : https://tuwlab.com/ece/26795

  - /etc..와 ~/...에 대해.
  : 절대경로를 기본으로, 상대경로. ~/..(특정유저의 공간(/home/username) 을 사용하므로,
    의도자체가 시스템을 위한것을 기본으로 사용하고, 추가로 특정유저를 위한 설정을 사용한다는것임.


## Login Shell
  - /etc/profile, ~/.bash_profile, ~/.bash_login, ~/.profile 실행
  - logout builtin명령 사용가능
    - logout (또는 exit) 시에 ~/.bash_logout 파일을 실행
    - logout시 백그라운드 jobs에게 종료신호 보낼수있음(특정설정필요)

## Non-Login Shell
  - Interactive non-login shell 은 시작시 /etc/bash.bashrc 와 ~/.bashrc 실행
  - Non-Interactive 는 여전히 ~/.bashrc읽지않음





실행자 결정
---
# 터미널에서 스크립트실행하는 방법.
```
# 프로그램 선택하여 실행
bash script
sh script

# 실행파일로 만든후 실행
# 권한부여필요: chomod +rx script
script

# 현재 터미널의 쉘로 실행한다(fork가 아닌듯함)
# 터미널에 설정된 $SHELL 환경변수에 의존함.
source conf.sh
. conf.sh
```

# shebang
: She (#) bang (!) 또는 shabang, hashbang 
: bash, source 등으로 명령으로 호출되는(bashrc등) 스크립트는 shabang 안써도됨
  - deep: https://mug896.gitbooks.io/shell-script/content/shebang.html
  - #!/usr/bin/env python
  : env를 사용하면, env를 중간자로 특정프로그램을 찾을수있기에 유연성이있지만, 대신 옵션을줄수없음
    

명령인자
---

TODO 해당명령어(프로그램)이 제공해야사용할수있는 관례적인 부분인걸까?

# -- 인자, 명령의 끝

  - 값없음
  : -o  --option

  - 값있음
  : -o value  --option=value

  - 조합
  : -oltr

  - 옵션의끝
  ```
  # 옵션과 인자를함께사용할경우 인자에 dash가 들어갈수있기에 옵션의 끝을 의미하는 -- 함께사용할수있음
  grep -r -- "--hello" 
  ```

# - 인자, stdin(표준입력)
: 표준입력을 의미하는 인자..?

```
# cat이 stdin을 마지막것으로 사용함.
echo hello world | cat test.txt -

# ps결과를 파이프를 통해? 표준입력으로 vi에서 사용한다..
ps jf | vi -
```
