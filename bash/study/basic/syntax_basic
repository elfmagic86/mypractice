
종료코드, 조건, 반복
===

종료코드
---
  - $?
  - 종료코드는 일반적으로 0이 참이라는 뜻.

  - script파일, 서브쉘은 종료상태값을 exit로 지정함(프로세스가 새로생성되기때문)
    function, source 명령은 return사용.
    exit, return으로 명시하지 않으면 직전명령의 종료상태값이 사용됨

  - 종료코드값을 사용하는 연산
  : if, while, until, ||, &&

  - 종료코드값 의미
  : https://mug896.gitbooks.io/shell-script/content/exit_status.html

조건
---
# if에대해서.
  - if {command}; then {command}; fi
  : if는 fi를만날때까지 정해진작업을수행함
  : 셸은 if키워드 다음 명령을 수행하고 그것의 종료코드를모은다. 0(참)일경우만 then을수행하고 나머지는 else등으로감.

  - if []같은형태는한쌍이아님.
  ```
  if ls | grep xx ; then echo eee; fi
  ```

# []에 대해서.test프로그램
: [] 는 test 프로그램임. 안의 조건으로 $?종료코드값을 0|1로변경시킴
: [ EXP ] 와 test EXP는 동등하다.

  - 주의
  ```
  # $1이 빈값인경우
  [ "$1" = hi ] # 성공
  [ $1 = hi ] # 실패: [ = hi ] 로 해석되어 test에 못된 인자를 준것처럼 해석됨
  ```


  - test로 할수있는것?
  : man test 로 메뉴얼참고
    STRING, INTEGER, FILE 등의 비교기능
    - 종료코드 설정 반전한다[ ! {일반적인조건} ]
    - 조건내에서 and(-a), or(-o)

# 논리연산자
: if와 마찬가지로 종료코드를 기준으로 성공|실패가름.
: &&, ||, !
  - !은 **명령의위치**에 공백과함께 사용해야만 logical not 역할함
  ```
  ! true # logical not
  !ls # history 확장
  ```

  - 우선순위
    - &&와 ||은 우선순위가 동등하다, &&가 우선순위높은것이 아님
    - !은 둘보다 우선순위 높음


# case
: 종료코드 평가 X, 문자열, 패턴일치용도
: \*, ?, | 사용가능. 자세한건 예제
: case당 ;;로 마무리하는 문법규칙.


반복
---
# for
: 종료코드평가X, in 키워드에 이어서 나오는 공백으로 구분된값을 변수str에 설정함.
	단순히 다음값이 없을때까지 $str의 값을 순차적으로 읽기만한다(shift되는것아님) .
```
for str in $strs; do echo $ss; done
```

# while
: 종료코드평가O
  while 의 조건명령이 종료코드기준점이므로, do~done 사이의 명령은 종료코드에 영향안줌.
: break사용가능.

